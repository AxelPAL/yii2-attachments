<?php

namespace nemmo\attachments\components;

use kartik\file\FileInput;
use nemmo\attachments\models\UploadForm;
use nemmo\attachments\ModuleTrait;
use yii\bootstrap\Widget;
use yii\helpers\FileHelper;
use yii\helpers\Html;
use yii\helpers\Url;

/**
 * Created by PhpStorm.
 * User: Алимжан
 * Date: 13.02.2015
 * Time: 21:18
 */
class AttachmentsInput extends Widget
{
    use ModuleTrait;

    public $id = '';
    
    public $attribute = 'file';

    public $model;

    public $pluginOptions = [];

    public $options = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        
        if(empty($this->id)) {
            $this->id = $this->attribute . '-input';
        }

        FileHelper::removeDirectory($this->getModule()->getUserDirPath($this->attribute)); // Delete all uploaded files in past

        $this->pluginOptions = array_replace($this->pluginOptions, [
            'uploadUrl' => Url::toRoute(['/attachments/file/upload', 'attribute'=>$this->attribute]),
            'initialPreview' => $this->model->isNewRecord ? [] : $this->model->getInitialPreviewByAttributeName($this->attribute),
            'initialPreviewConfig' => $this->model->isNewRecord ? [] : $this->model->getInitialPreviewConfigByAttributeName($this->attribute),
            'uploadAsync' => false
        ]);

        $this->options = array_replace($this->options, [
            'id' => $this->id,
            //'multiple' => true
        ]);

        $js = <<<JS
var fileInput{$this->attribute} = $('#{$this->id}');
var form{$this->attribute} = fileInput{$this->attribute}.closest('form');
var filesUploaded{$this->attribute} = false;
var filesToUpload{$this->attribute} = 0;
var uploadButtonClicked{$this->attribute} = false;

form{$this->attribute}.on('beforeSubmit', function(event) { // form submit event
    console.log('submit');
    if (!filesUploaded{$this->attribute} && filesToUpload{$this->attribute}) {
        console.log('upload');
        $('#{{$this->id}}').fileinput('upload').fileinput('lock');

        return false;
    }
});

fileInput{$this->attribute}.on('filebatchpreupload', function(event, data, previewId, index) {
    uploadButtonClicked{$this->attribute} = true;
});


fileInput{$this->attribute}.on('filebatchuploadsuccess', function(event, data, previewId, index) {
    filesUploaded{$this->attribute} = true;
    $('#{{$this->id}}').fileinput('unlock');
    if (!uploadButtonClicked{$this->attribute}) {
        form{$this->attribute}.submit();
    } else {
        uploadButtonClicked{$this->attribute} = false;
    }
});

fileInput{$this->attribute}.on('filebatchselected', function(event, files) { // there are some files to upload
    filesToUpload{$this->attribute} = files.length
});

fileInput{$this->attribute}.on('filecleared', function(event) { // no files to upload
    filesToUpload{$this->attribute} = 0;
});

JS;
        
        \Yii::$app->view->registerJs($js);
    }

    public function run()
    {
        $fileinput = FileInput::widget([
            'model' => new UploadForm(),
            'attribute' => 'file[]',
            'options' => $this->options,
            'pluginOptions' => $this->pluginOptions
        ]);

        return Html::tag('div', $fileinput, ['class' => 'form-group']);
    }
}